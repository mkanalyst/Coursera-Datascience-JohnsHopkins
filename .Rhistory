head(data)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean <- function(directory, pollutant, id = 1) {
if(id < 10){
newid <- as.character(paste("00", id, sep=""))
}
if (id >= 10 & id < 100) {
newid <- as.character(paste("0", id, sep=""))
}
filename <- paste(directory,newid, ".csv", sep="")
filename
data <- read.csv(filename)
head(data)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean
pollutantmean(directory)
pollutantmean <- function(directory, pollutant, id = 1:2) {
if(id < 10){
newid <- as.character(paste("00", id, sep=""))
}
if (id >= 10 & id < 100) {
newid <- as.character(paste("0", id, sep=""))
}
filename <- paste(directory,newid, ".csv", sep="")
filename
data <- read.csv(filename)
head(data)
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
}
pollutantmean(directory)
?sum
directory <- c('~/R_test/JH/specdata/')
pollutantmean <- function(directory, pollutant, id = 1:2) {
for(i in id){
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
filename <- paste(directory,newid, ".csv", sep="")
filename
}
pollutantmean(directory, pollutant, id = 1:2)
}
pollutantmean(directory, pollutant, id = 1:2)
pollutantmean <- function(directory, pollutant, id = 1:2) {
for(i in id){
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
filename <- paste(directory,newid, ".csv", sep="")
filename
}
}
directory <- c('~/R_test/JH/specdata/')
pollutantmean(directory, pollutant, id = 1:2)
?read.csv
directory <- c('~/R_test/JH/specdata/')
pollutantmean <- function(directory, pollutant, id = 1:2) {
for(i in id){
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
else {newid <- as.character(i)}
filename <- paste(directory,newid, ".csv", sep="")
if (!exists("data")){
data <- read.csv(filename, header=TRUE, sep =",")
}
if (exists("data")){
temp_data <- read.csv(filename, header=TRUE, sep =",")
data <- rbind
}
data <- read.csv(filename)
dataset <- rbind(data, temp_data)
}
}
directory <- c('~/R_test/JH/specdata/')
pollutantmean <- function(directory, pollutant, id = 1:2) {
for(i in id){
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
else {newid <- as.character(i)}
filename <- paste(directory,newid, ".csv", sep="")
if (!exists("data")){
data <- read.csv(filename, header=TRUE, sep =",")
}
if (exists("data")){
temp_data <- read.csv(filename, header=TRUE, sep =",")
data <- rbind(data, temp_data)
rm(temp_data)
}
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean(directory, sulfate, id = 1:2)
directory <- c('~/R_test/JH/specdata/')
filename <- function(i){
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
else {newid <- as.character(i)}
filename <- paste(directory,newid, ".csv", sep="")
}
pollutantmean <- function(directory, pollutant, id = 1:2) {
for(i in id){
if (!exists("data")){
data <- read.csv(filename(i), header=TRUE, sep =",")
}
if (exists("data")){
temp_data <- read.csv(filename(i), header=TRUE, sep =",")
data <- rbind(data, temp_data)
rm(temp_data)
}
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean(directory, sulfate, id = 1:2)
directory <- c('~/R_test/JH/specdata/')
filename <- function(directory, i){
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
else {newid <- as.character(i)}
filename <- paste(directory,newid, ".csv", sep="")
}
filename(directory, 2)
filename
file <- filename(directory, 2)
file
filename <- function(directory, i){
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
filename <- paste(directory,newid, ".csv", sep="")
}
file <- filename(directory, 2)
file
filename <- function(directory, i){
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
else {newid == i}
filename <- paste(directory,newid, ".csv", sep="")
}
file <- filename(directory, 2)
file
pollutantmean <- function(directory, pollutant, id = 1:2) {
for(i in id){
if (!exists("data")){
data <- read.csv(filename(directory,i), header=TRUE, sep =",")
}
if (exists("data")){
temp_data <- read.csv(filename(directory,i), header=TRUE, sep =",")
data <- rbind(data, temp_data)
rm(temp_data)
}
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean(directory, sulfate, id = 1:2)
pollutantmean(directory, sulfate, 1:2)
pollutantmean <- function(directory, pollutant, id = 1:20) {
for(i in id){
if (!exists("data")){
data <- read.csv(filename(directory,i), header=TRUE)
}
if (exists("data")){
temp_data <- read.csv(filename(directory,i), header=TRUE)
data <- rbind(data, temp_data)
rm(temp_data)
}
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean(directory, sulfate, 1:2)
pollutantmean <- function(directory, pollutant, id = 1:20) {
for(i in id){
if (!exists("data")){
data <- read.csv(filename(directory,i), header=TRUE)
}
if (exists("data")){
temp_data <- read.csv(filename(directory,i), header=TRUE)
data <- rbind(data, temp_data)
rm(temp_data)
}
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean(directory, sulfate, 1:2)
file <- filename(directory, 12)
file
temp_data <- read.csv(filename(directory,1), header=TRUE)
temp_data
h
head(temp_data)
temp_data <- read.csv(filename(directory,1), header=TRUE)
head(temp_data)
data <- temp_data
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
means[sulfate] <- mean(data[,sulfate], na.rm = TRUE)
directory <- c('~/R_test/JH/specdata/')
pollutantmean <- function(directory, pollutant, id = 1:10) {
for(i in id){
if (!exists("data")){
data <- read.csv(filename(directory,i), header=TRUE)
}
if (exists("data")){
temp_data <- read.csv(filename(directory,i), header=TRUE)
data <- rbind(data, temp_data)
rm(temp_data)
}
nc <- ncol(data)
means <- numeric(nc)
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean <- function(directory, pollutant, id = 1:20) {
for(i in id){
if (!exists("data")){
data <- read.csv(filename(directory,i), header=TRUE)
}
if (exists("data")){
temp_data <- read.csv(filename(directory,i), header=TRUE)
data <- rbind(data, temp_data)
rm(temp_data)
}
nc <- ncol(data)
means <- numeric(nc)
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean(directory, sulfate, 1:2)
pollutantmean(directory, pollutant="sulfate", 1:2)
pollutantmean(directory, pollutant="sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
dir <- paste("~/R_test/JH/", directory)
dir
directory <""
directory <- ""
rm(list=ls(all=TRUE))
directory <- c('specdata')
directory
dir <- paste("~/R_test/JH/", directory)
dir
dir <- paste("~/R_test/JH/", directory, sep="")
dir
rm(list=ls(all=TRUE))
filename <- function(directory, i){
dir <- paste("~/R_test/JH/", directory, sep="")
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
else {newid == i}
filename <- paste(directory,newid, ".csv", sep="")
}
file <- filename(directory, 12)
file <- filename(specdata, 12)
directory <- c('specdata')
directory
dir <- paste("~/R_test/JH/", directory, sep="")
dir
dir <- paste("~/R_test/JH/", directory,"/" sep="")
dir <- paste("~/R_test/JH/", directory,"%/%" sep="")
dir <- paste("~/R_test/JH/", directory,"/", sep="")
dir
filename <- function(directory, i){
dir <- paste("~/R_test/JH/", directory,"/", sep="")
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
else {newid == i}
filename <- paste(directory,newid, ".csv", sep="")
}
file <- filename(specdata, 12)
head(file)
file <- filename("specdata", 2)
head(file)
rm(list=ls(all=TRUE))
filename <- function(directory, i){
dir <- paste("~/R_test/JH/", directory,"/", sep="")
if(i < 10){
newid <- as.character(paste("00", i, sep=""))
}
if (i >= 10 & i < 100) {
newid <- as.character(paste("0", i, sep=""))
}
else {newid == i}
filename <- paste(directory,newid, ".csv", sep="")
}
pollutantmean <- function(directory, pollutant, id = 1:20) {
for(i in id){
if (!exists("data")){
data <- read.csv(filename(directory,i), header=TRUE)
}
if (exists("data")){
temp_data <- read.csv(filename(directory,i), header=TRUE)
data <- rbind(data, temp_data)
rm(temp_data)
}
nc <- ncol(data)
means <- numeric(nc)
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean("specdata", "sulfate", 1:10)
data <- read.csv(filename)
pollutantmean <- function(directory, pollutant, id = 1:20) {
directory <- paste("~/R_test/JH/", directory,"/", sep="")
for(i in id){
if (!exists("data")){
data <- read.csv(filename(directory,i), header=TRUE)
}
if (exists("data")){
temp_data <- read.csv(filename(directory,i), header=TRUE)
data <- rbind(data, temp_data)
rm(temp_data)
}
nc <- ncol(data)
means <- numeric(nc)
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:20) {
dir <- paste("~/R_test/JH/", directory,"/", sep="")
for(i in id){
if (!exists("data")){
data <- read.csv(filename(dir,i), header=TRUE)
}
if (exists("data")){
temp_data <- read.csv(filename(dir,i), header=TRUE)
data <- rbind(data, temp_data) # error
rm(temp_data)
}
nc <- ncol(data)
means <- numeric(nc)
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id = 1:20) {
dir <- paste("~/R_test/JH/", directory,"/", sep="")
for(i in id){
if (!exists("data")){
data <- read.csv(filename(dir,i), header=TRUE)
}
if (exists("data")){
temp_data <- read.csv(filename(dir,i), header=TRUE)
data <- rbind(data, temp_data) # error
# rm(temp_data)
}
nc <- ncol(data)
means <- numeric(nc)
means[pollutant] <- mean(data[,pollutant], na.rm = TRUE)
}
means
}
pollutantmean("specdata", "sulfate", 1:10)
?rbind
dir <- paste("~/R_test/JH/", directory,"/", sep="")
directory <- c('specdata')
dir <- paste("~/R_test/JH/", directory,"/", sep="")
data <- read.csv(filename(dir,i), header=TRUE)
data <- read.csv(filename(dir,1), header=TRUE)
head(data)
summary(data)
?require()
install.packages("KernSmooth")
library(KernSmooth)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
?order
setwd("~/R_test/JH/data")
library(data.table)
DT <- read.table(file = "./household_power_consumption.txt",
header = TRUE, sep = ';', na.strings = "?", dec = '.', nrow=100000)
DT$DateTime <- strptime(paste(DT$Date,DT$Time), "%d/%m/%Y %H:%M:%S")
DT1 <- subset(DT, DT$DateTime >= "2007-02-01 00:00:00"
& DT$DateTime < "2007-02-03 00:00:00")
hist(DT1$Global_active_power, col="red",xlab="Global Active Power (kilowatts)",
main="Global Active Power")
dev.copy(png, file="plot1.png")
dev.off()
with(DT1, plot(DT1$DateTime, DT1$Global_active_power, type="l", xlab=" ",
ylab="Global Active Power (kilowatts"))
dev.copy(png, file="plot2.png")
dev.off()
plot(DT1$DateTime, DT1$Sub_metering_1, type="l", xlab=" ",
ylab="Energy sub metering")
lines(DT1$DateTime, DT1$Sub_metering_2, col="red")
lines(DT1$DateTime, DT1$Sub_metering_3, col="blue")
legend("topright", lty=c(1,1,1), col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot3.png")
dev.off()
par(mfcol=c(2,2))
with(DT1, plot(DT1$DateTime, DT1$Global_active_power, type="l", xlab=" ",
ylab="Global Active Power (kilowatts"))
plot(DT1$DateTime, DT1$Sub_metering_1, type="l", xlab=" ",
ylab="Energy sub metering")
lines(DT1$DateTime, DT1$Sub_metering_2, col="red")
lines(DT1$DateTime, DT1$Sub_metering_3, col="blue")
legend("topright", lty=c(1,1,1), col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
bty="n", cex=0.5, xjust=0)
with(DT1, plot(DT1$DateTime, DT1$Voltage, type="l", xlab="datetime",
ylab="Voltage"))
with(DT1, plot(DT1$DateTime, DT1$Global_reactive_power, type="l", xlab="datetime",
ylab="Global_reactive_power"))
dev.copy(png, file="plot4.png")
dev.off()
hist(DT1$Global_active_power, col="red",xlab="Global Active Power (kilowatts)",
main="Global Active Power")
dev.copy(png, file="plot1.png")
dev.off()
par(mfcol=c(1,1))
with(DT1, plot(DT1$DateTime, DT1$Global_active_power, type="l", xlab=" ",
ylab="Global Active Power (kilowatts"))
dev.copy(png, file="plot2.png")
dev.off()
par(mfcol=c(1,1))
hist(DT1$Global_active_power, col="red",xlab="Global Active Power (kilowatts)",
main="Global Active Power")
dev.copy(png, file="plot1.png")
dev.off()
with(DT1, plot(DT1$DateTime, DT1$Global_active_power, type="l", xlab="  ",
ylab="Global Active Power (kilowatts"))
dev.copy(png, file="plot2.png")
dev.off()
plot(DT1$DateTime, DT1$Sub_metering_1, type="l", xlab=" ",
ylab="Energy sub metering")
lines(DT1$DateTime, DT1$Sub_metering_2, col="red")
lines(DT1$DateTime, DT1$Sub_metering_3, col="blue")
legend("topright", lty=c(1,1,1), col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot3.png")
dev.off()
par(mfcol=c(2,2))
with(DT1, plot(DT1$DateTime, DT1$Global_active_power, type="l", xlab=" ",
ylab="Global Active Power (kilowatts"))
plot(DT1$DateTime, DT1$Sub_metering_1, type="l", xlab=" ",
ylab="Energy sub metering")
lines(DT1$DateTime, DT1$Sub_metering_2, col="red")
lines(DT1$DateTime, DT1$Sub_metering_3, col="blue")
legend("topright", lty=c(1,1,1), col=c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
bty="n", cex=0.5, xjust=0)
with(DT1, plot(DT1$DateTime, DT1$Voltage, type="l", xlab="datetime",
ylab="Voltage"))
with(DT1, plot(DT1$DateTime, DT1$Global_reactive_power, type="l", xlab="datetime",
ylab="Global_reactive_power"))
dev.copy(png, file="plot4.png")
dev.off()
